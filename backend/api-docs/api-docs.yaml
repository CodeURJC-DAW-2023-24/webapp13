openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
paths:
  /api/users/:
    post:
      tags:
      - user-rest-controller
      summary: Register User
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              required:
              - email
              - name
              - password
              - repeatPassword
              - username
              type: object
              properties:
                name:
                  type: string
                username:
                  type: string
                password:
                  type: string
                repeatPassword:
                  type: string
                email:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        "404":
          description: User registration failed
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: User created successfully
          content:
            '*/*':
              schema:
                type: object
  /api/reports/:
    get:
      tags:
      - report-rest-controller
      summary: Get all reports
      operationId: getReports
      responses:
        "200":
          description: Reports retrieved successfully
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report_Detailed'
    post:
      tags:
      - report-rest-controller
      summary: Add new report
      operationId: addNewReport
      parameters:
      - name: userReported
        in: query
        required: true
        schema:
          type: string
      - name: description
        in: query
        required: true
        schema:
          type: string
      - name: category
        in: query
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Report created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Report_Detailed'
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Report_Detailed'
  /api/products/{id}/image:
    get:
      tags:
      - products-rest-controller
      summary: Get a Image Product by its id
      operationId: getImage1
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: Image not found
        "404":
          description: Product not found
        "200":
          description: Found the Image Product
          content:
            application/json: {}
    post:
      tags:
      - products-rest-controller
      summary: Create a Image Product by its id
      operationId: uploadImage1
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  description: Image 1 Product
                  format: binary
      responses:
        "201":
          description: Create the Image Product
          content:
            application/json: {}
        "204":
          description: Image not found
        "404":
          description: Product not found
  /api/products/purchase:
    post:
      tags:
      - products-rest-controller
      summary: Purchase Product
      operationId: purchaseProduct
      parameters:
      - name: productID
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: rating
        in: query
        required: false
        schema:
          type: number
          format: float
          default: 0.0
      responses:
        "200":
          description: Product purchased
          content:
            application/json: {}
  /api/products/:
    get:
      tags:
      - products-rest-controller
      summary: Get Products
      operationId: getAllProducts_1
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 8
      - name: productType
        in: query
        required: false
        schema:
          type: integer
          format: int64
          default: 0
      responses:
        "200":
          description: Found the Products
          content:
            application/json: {}
    post:
      tags:
      - products-rest-controller
      summary: Create a Product
      operationId: registerProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product_Detailed'
      responses:
        "201":
          description: Succesful Product creation
          content:
            application/json: {}
        "406":
          description: Not Acceptable Post title exists
  /api/auth/refresh:
    post:
      tags:
      - login-rest-controller
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/logout:
    post:
      tags:
      - login-rest-controller
      operationId: logOut
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      tags:
      - login-rest-controller
      operationId: login
      parameters:
      - name: accessToken
        in: cookie
        required: false
        schema:
          type: string
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/users/{userID}:
    delete:
      tags:
      - user-rest-controller
      summary: Delete User by ID
      operationId: deleteUser
      parameters:
      - name: userID
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: User deleted successfully
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
    patch:
      tags:
      - user-rest-controller
      summary: Update User by ID
      operationId: updateUser
      parameters:
      - name: userID
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: fullName
        in: query
        required: false
        schema:
          type: string
      - name: username
        in: query
        required: false
        schema:
          type: string
      - name: currentPassword
        in: query
        required: false
        schema:
          type: string
      - name: newPassword
        in: query
        required: false
        schema:
          type: string
      - name: confirmPassword
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: User updated successfully
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Bad request
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
  /api/users/{userID}/reviews:
    get:
      tags:
      - user-rest-controller
      summary: Get All reviews by User ID
      operationId: getUserReviews
      parameters:
      - name: userID
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Found the Products
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review_Detailed'
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review_Detailed'
  /api/users/{userID}/image:
    get:
      tags:
      - user-rest-controller
      summary: Download User Image by ID
      operationId: downloadUserImage
      parameters:
      - name: userID
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Found the User Image
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
  /api/users/{id}:
    get:
      tags:
      - user-rest-controller
      summary: Get User by ID
      operationId: getUserByID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Found the User
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User_Detailed'
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User_Detailed'
  /api/users/{id}/allProducts:
    get:
      tags:
      - user-rest-controller
      summary: Get All Products by User ID
      operationId: getProducts
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Found the Products
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
  /api/users/username/{username}:
    get:
      tags:
      - user-rest-controller
      summary: Get User by Username
      operationId: getUserByUsername
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Found the User
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User_Detailed'
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User_Detailed'
  /api/reviews/{id}:
    get:
      tags:
      - review-rest-controller
      summary: Get review by ID
      operationId: getReviewByID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Found the review
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Review_Detailed'
        "404":
          description: Review not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Review_Detailed'
  /api/reviews/:
    get:
      tags:
      - review-rest-controller
      summary: Get all reviews
      operationId: getAllProducts
      responses:
        "200":
          description: Found reviews
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review_Detailed'
        "404":
          description: No reviews found
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review_Detailed'
  /api/reports/{id}:
    get:
      tags:
      - report-rest-controller
      summary: Get report by ID
      operationId: manageReport
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Report not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Report_Detailed'
        "200":
          description: Report details retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Report_Detailed'
    delete:
      tags:
      - report-rest-controller
      summary: Delete Report by ID
      operationId: deleteReport
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Report not found
        "201":
          description: Successful Report delete
          content:
            application/json: {}
  /api/products/{id}:
    get:
      tags:
      - products-rest-controller
      summary: Get Product by its id
      operationId: getProduct
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Product Found
          content:
            application/json: {}
        "404":
          description: Product not found
    delete:
      tags:
      - products-rest-controller
      summary: Delete a Product
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "201":
          description: Successful Product delete
          content:
            application/json: {}
        "404":
          description: Product not found
  /api/products/{id}/similar:
    get:
      tags:
      - products-rest-controller
      summary: Get similar products
      operationId: getSimilarProducts
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: pageSize
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 8
      responses:
        "200":
          description: Found the Products
          content:
            application/json: {}
  /api/products/type/{id}:
    get:
      tags:
      - products-rest-controller
      summary: Get products by type
      operationId: getProductsByType
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Found the Products
          content:
            application/json: {}
  /api/products/search:
    get:
      tags:
      - products-rest-controller
      summary: Get search
      operationId: getSearch
      parameters:
      - name: search
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 8
      responses:
        "200":
          description: Found the Products
          content:
            application/json: {}
  /api/products/pdf/{productId}:
    get:
      tags:
      - products-rest-controller
      summary: Get PDF from purchase product
      operationId: generatePDF
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: PDF generated
          content:
            application/json: {}
  /api/products/categories:
    get:
      tags:
      - products-rest-controller
      operationId: getAllCategories
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /api/auth/userInfo:
    get:
      tags:
      - login-rest-controller
      summary: Get User Info
      operationId: getUserInfo
      responses:
        "200":
          description: Found the User
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    Report_Detailed:
      type: object
      properties:
        id:
          type: integer
          format: int64
        owner:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        userReported:
          type: integer
          format: int64
        creationDate:
          type: string
    Product_Detailed:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        address:
          type: string
        price:
          type: number
          format: double
        description:
          type: string
        imageFile:
          type: object
          properties:
            binaryStream:
              type: object
        image:
          type: boolean
        owner:
          type: integer
          format: int64
        productType:
          type: integer
          format: int64
      description: Object Type Product
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
        accessToken:
          $ref: '#/components/schemas/Token'
        refreshToken:
          $ref: '#/components/schemas/Token'
    Token:
      type: object
      properties:
        tokenType:
          type: string
          enum:
          - ACCESS
          - REFRESH
        tokenValue:
          type: string
        duration:
          type: integer
          format: int64
        expiryDate:
          type: string
          format: date-time
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Review_Detailed:
      type: object
      properties:
        reviewID:
          type: integer
          format: int64
        rating:
          type: number
          format: float
        sellerID:
          type: integer
          format: int64
    User_Detailed:
      type: object
      properties:
        userID:
          type: integer
          format: int64
        encodedPassword:
          type: string
        fullName:
          type: string
        username:
          type: string
        userEmail:
          type: string
        income:
          type: number
          format: double
        expense:
          type: number
          format: double
        userImg:
          type: object
          properties:
            binaryStream:
              type: object
        roles:
          type: array
          items:
            type: string
        reviewList:
          type: array
          items:
            type: integer
            format: int32
        imageFile:
          type: object
          properties:
            binaryStream:
              type: object
        name:
          type: string
